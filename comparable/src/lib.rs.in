#[doc(hidden)]
pub mod boxes;
#[doc(hidden)]
pub mod empty;
#[doc(hidden)]
pub mod map;
#[doc(hidden)]
pub mod opt;
#[doc(hidden)]
pub mod scalar;
#[doc(hidden)]
pub mod set;
#[doc(hidden)]
pub mod string;
#[doc(hidden)]
pub mod types;

#[doc(hidden)]
pub use crate::boxes::*;
#[doc(hidden)]
pub use crate::map::*;
#[doc(hidden)]
pub use crate::opt::*;
#[doc(hidden)]
pub use crate::scalar::*;
#[doc(hidden)]
pub use crate::set::*;
#[doc(hidden)]
pub use crate::string::*;

pub use crate::types::{Changed, Comparable};

/// Assert that two values of a type have changed in the way described.
#[macro_export]
macro_rules! assert_changes {
    ($left:expr, $right:expr, $expected:expr$(,)?) => {{
        use comparable::Comparable;
        assert_eq!($expected, $left.comparison(&$right));
    }};
}

/// Assert that two values of a type have either not changed, or they have
/// changed only to the extent described by the give change set. This allows
/// tests to confirm that what they expected to see happened, and anything
/// they didn't expect to see in fact did not happen.
///
/// This function is just a wrapper around `pretty_assertions::assert_eq!`
/// and does the following:
/// ```ignore
/// pretty_assertions::assert_eq!(expected, left.comparison(right))
/// ```
#[macro_export]
macro_rules! pretty_assert_changes {
    ($left:expr, $right:expr, $expected:expr$(,)?) => {{
        use comparable::Comparable;
        pretty_assertions::assert_eq!($expected, $left.comparison(&$right));
    }};
}

/// Assert that two values of a type have changed in the way described,
/// stopping at the first failure if this occurs in a proptest block.
#[macro_export]
macro_rules! prop_assert_changes {
    ($left:expr, $right:expr, $expected:expr$(,)?) => {{
        use comparable::Comparable;
        proptest::prop_assert_eq!($expected, $left.comparison(&$right));
    }};
}

/// Assert that two values of a type have changed in the way described,
/// stopping at the first failure if this occurs in a proptest block.
#[macro_export]
macro_rules! prop_pretty_assert_changes {
    ($left:expr, $right:expr, $expected:expr$(,)?) => {{
        use comparable::Comparable;
        let changes = $left.comparison(&$right);
        if $expected != changes {
            return Err(proptest::test_runner::TestCaseError::fail(format!(
                "prop_assert_changes! failed: `(left == right)`\
                 \n\
                 \n{}\
                 \n",
                pretty_assertions::Comparison::new(&$expected, &changes)
            )));
        }
    }};
}

// Re-export #[derive(Comparable)].
//
// The reason re-exporting is not enabled by default is that disabling it would
// be annoying for crates that provide handwritten impls or data formats. They
// would need to disable default features and then explicitly re-enable std.
#[cfg(feature = "comparable_derive")]
#[doc(hidden)]
pub use comparable_derive::*;
